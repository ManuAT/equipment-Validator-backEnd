{"version":3,"sources":["ExcelView.js","App.js","reportWebVitals.js","index.js"],"names":["ExcelView","data","rows2","columnsName","map","obj","id","uuidv4","somePositions","name","someEquip","useState","rows","setRows","onFieldChange","rowId","field","value","find","concat","initColumns","title","row","focus","selectedId","client","isOpen","items","onChange","type","deviceId","community","siteName","equipmentName","equipmentType","assetCode","pointsData","roomsData","floorsData","commonAreaData","console","log","alert","servingToData","width","servingByData","contractAccountNumber","premiseNo","meterNumber","columns","setColumns","style","height","className","float","marginTop","onClick","e","wb","XLSX","book_new","Props","Title","Subject","Author","CreatedDate","Date","SheetNames","push","rowData","ws","json_to_sheet","Sheets","wbout","bookType","saveAs","Blob","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","s2ab","isColumnsResizable","isScrollable","columnWidthValues","placeholder","onColumnResize","widthValues","newColumns","Object","keys","forEach","columnId","getRowKey","App","setColumnsName","setData","position","marginLeft","marginBottom","accept","file","target","files","reader","FileReader","onload","evt","bstr","result","wsname","dataString","dataStringLines","split","headers","list","j","d","substring","values","filter","x","c","selector","processData","sheet_to_csv","header","readAsBinaryString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d861db90.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport { Grid,Input,Select } from 'react-spreadsheet-grid'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nexport default function ExcelView({data,columnsName}) {\r\n\r\n    // console.log(data,columnsName);\r\n    var row2 =[]\r\n    row2 = data.map(obj=> ({ ...obj, id: uuidv4() }))\r\n\r\n\r\n    // const rows1 = [\r\n    //     { id: uuidv4(), client: 'nectar', deviceId: 'Win-3470-EF83-AAC7-0016', community:\"downtown\" ,siteName:'OTCI Attareen',equipmentName:'ATREN 1F FCU Lift Lobby Core A',equipmentType:'FanCoilUnit',assetCode:'0187902',pointsData:'Run Status@BMS Schedule Enable@Manual Occupancy@Return Temperature@Space Humidity@Valve Position@Supervisory Fan Speed@Fan Operation Command@Return Temperature Setpoint@Unoccupied Setpoint'},\r\n    //     { id: uuidv4(), client: 'nectar', deviceId: 'Win-3470-EF83-AAC7-0016', community:\"downtown\" ,siteName:'OTCI Attareen',equipmentName:'ATREN 1F FCU Lift Lobby Core A',equipmentType:'FanCoilUnit',assetCode:'0187902',pointsData:'Run Status@BMS Schedule Enable@Manual Occupancy@Return Temperature@Space Humidity@Valve Position@Supervisory Fan Speed@Fan Operation Command@Return Temperature Setpoint@Unoccupied Setpoint'}\r\n    //     // and so on...\r\n    // ];\r\n\r\n    const rows2 = row2\r\n    // console.log(rows2);\r\n\r\n    const somePositions =[{\r\n        id: 'nectarit',\r\n        name: 'nectarit'\r\n    }, {\r\n        id: 'emaar',\r\n        name: 'emaar'\r\n    },\r\n    {\r\n      id: 'netix',\r\n      name: 'netix'\r\n    }\r\n  ];\r\n\r\n    const someEquip =[{\r\n      id: 'FanCoilUnit',\r\n      name: 'FanCoilUnit'\r\n  }, {\r\n      id: 'BTUMeter',\r\n      name: 'BTUMeter'\r\n    },\r\n    {\r\n      id: 'BoosterPump',\r\n      name: 'BoosterPump'\r\n    },{\r\n      id: 'DDCController',\r\n      name: 'DDCController'\r\n    }\r\n    \r\n  ]\r\n\r\n    const [rows, setRows] = useState(rows2);\r\n    \r\n    // A callback called every time a value changed.\r\n    // Every time it save a new value to the state.\r\n    const onFieldChange = (rowId, field) => (value) => {\r\n        // Find the row that is being changed\r\n        const row = rows.find( (id)  => id.id === rowId);\r\n        // console.log(\"row\",row,value);\r\n        // Change a value of a field\r\n        row[field] = value;\r\n        setRows([].concat(rows))\r\n    }\r\n    \r\n    const initColumns = () => [\r\n      {\r\n        id:0,\r\n        title: () => 'client*',\r\n        value: (row, { focus }) => {\r\n          return (\r\n            <Select\r\n                selectedId={row.client}\r\n                isOpen={focus}\r\n                items={somePositions}\r\n                onChange={onFieldChange(row.id, 'client')}\r\n                />\r\n          );\r\n        }\r\n      }, {\r\n        id:1,\r\n        title: () => 'deviceId',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.deviceId}\r\n              onChange={onFieldChange(row.id, 'deviceId')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:2,\r\n        title: () => 'community*',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.community}\r\n              onChange={onFieldChange(row.id, 'community')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:3,\r\n        title: () => 'siteName*',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.siteName}\r\n              onChange={onFieldChange(row.id, 'siteName')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id: 4,\r\n        title: () => 'equipmentName*',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.equipmentName}\r\n              onChange={onFieldChange(row.id, 'equipmentName')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:5,\r\n        title: () => 'equipmentType*',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n                <Select\r\n                selectedId={row.equipmentType}\r\n                isOpen={focus}\r\n                items={someEquip}\r\n                onChange={onFieldChange(row.id, 'equipmentType')}\r\n                />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:6,\r\n        title: () => 'assetCode',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.assetCode}\r\n              onChange={onFieldChange(row.id, 'assetCode')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:7,\r\n        title: () => 'pointsData*',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.pointsData}\r\n              onChange={onFieldChange(row.id, 'pointsData')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      }\r\n      ,\r\n      {\r\n        id:8,\r\n        title: () => 'roomsData',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.roomsData}\r\n              onChange={onFieldChange(row.id, 'roomsData')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:9,\r\n        title: () => 'floorsData',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.floorsData}\r\n              onChange={onFieldChange(row.id, 'floorsData')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:10,\r\n        title: () => 'commonAreaData',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.commonAreaData}\r\n              onChange={onFieldChange(row.id, 'commonAreaData')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:11,\r\n        title: () => 'servingToData',\r\n        value: (row, { focus }) => {\r\n            console.log(\"focus status\",focus);\r\n            // focus ? alert(row.servingToData+\"\"):null\r\n            if(focus)\r\n              alert(row.servingToData)\r\n\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.servingToData}\r\n              onChange={onFieldChange(row.id, 'servingToData')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        },\r\n        width:12\r\n      },\r\n      {\r\n        id:12,\r\n        title: () => 'servingByData',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.servingByData}\r\n              onChange={onFieldChange(row.id, 'servingByData')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        },\r\n        width:12\r\n      },\r\n      {\r\n        id:13,\r\n        title: () => 'contractAccountNumber',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.contractAccountNumber}\r\n              onChange={onFieldChange(row.id, 'contractAccountNumber')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:14,\r\n        title: () => 'premiseNo',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.premiseNo}\r\n              onChange={onFieldChange(row.id, 'premiseNo')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      },\r\n      {\r\n        id:15,\r\n        title: () => 'meterNumber',\r\n        value: (row, { focus }) => {\r\n            return (\r\n\r\n              <Input type=\"text\"\r\n              value={row.meterNumber}\r\n              onChange={onFieldChange(row.id, 'meterNumber')}\r\n              focus = {focus}\r\n            />\r\n            );\r\n        }\r\n      }\r\n    ]\r\n\r\n\r\n\r\n\r\n     // Put columns to the state to be able to store there their width values.\r\n     const [columns, setColumns] = useState(initColumns())\r\n\r\n     // Change columns width values in the state to not lose them.\r\n     const onColumnResize = (widthValues) => {\r\n      const newColumns = [].concat(columns)\r\n      Object.keys(widthValues).forEach((columnId) => {\r\n          const column = columns.find(({ id }) => id == columnId);\r\n          column.width = widthValues[columnId]\r\n      })\r\n      setColumns(newColumns)\r\n  }\r\n\r\n  const handleDownload = e =>{\r\n \r\n        var wb = XLSX.utils.book_new();\r\n\r\n        wb.Props = {\r\n          Title: \"SheetJS Tutorial\",\r\n          Subject: \"Test\",\r\n          Author: \"Manu\",\r\n          CreatedDate: new Date(2017,12,19)\r\n          };\r\n      \r\n          wb.SheetNames.push(\"sheet1\");\r\n\r\n          var rowData = [].concat(rows)\r\n\r\n\r\n          var ws = XLSX.utils.json_to_sheet(rowData.map(({id, ...remainingAttrs}) => remainingAttrs));\r\n\r\n          wb.Sheets[\"sheet1\"] = ws;\r\n\r\n          var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});\r\n\r\n            function s2ab(s) { \r\n              var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer\r\n              var view = new Uint8Array(buf);  //create uint8array as viewer\r\n              for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet\r\n              return buf;    \r\n            }\r\n            saveAs(new Blob([s2ab(wbout)],{type:\"application/octet-stream\"}), 'test.xlsx');\r\n  }\r\n\r\n    return (\r\n      <div style={{ height: '800px' }}>\r\n        <div className=\"downloadBtn\" style={{float:'right',marginTop:'-96px'}}>\r\n        <h3>download excel</h3>\r\n        <button onClick={handleDownload}>download</button>\r\n        </div>\r\n        <Grid\r\n            columns={initColumns()}\r\n            rows={rows}\r\n            isColumnsResizable\r\n            isScrollable\r\n            columnWidthValues\r\n            // focusOnSingleClick\r\n            placeholder\r\n            onColumnResize={onColumnResize}\r\n            getRowKey={row => row.id}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState,useRef} from 'react';\nimport './App.css';\nimport ExcelView from './ExcelView'\nimport * as XLSX from 'xlsx';\n\nfunction App() {\n  \n  const [columnsName, setColumnsName] = useState([]);\n  const [data, setData] = useState([]);\n\n  // process CSV data\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n    \n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n\n    setData(list);\n    setColumnsName(columns);\n\n\n\n  }\n\n  // handle file upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  }\n\n  return (\n    <div>\n      <div className=\"tittle\" style={{position:'absolute',marginLeft:'40%'}}>\n        <h2>Nectar Oboarding Validator</h2>\n      </div>\n      <div className=\"uploadBtn\" style={{marginTop:'20px',marginBottom:'12px'}}>\n      <h3>Upload csv/excel</h3>\n      <input\n        type=\"file\"\n        accept=\".csv,.xlsx,.xls\"\n        onChange={handleFileUpload}\n      />\n      </div>\n      {data.length>0 ? <ExcelView data={data} columnsName={columnsName}/> : null}\n      {/* <ExcelView data={data} columnsName={columnsName}/> */}\n    </div>\n  );\n}\n\n\n// https://www.geeksforgeeks.org/file-uploading-in-react-js/\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}